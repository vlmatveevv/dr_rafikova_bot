import aiohttp
import config
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def send_message(user_id: int, text, reply_markup=None, message_thread_id=None, reply_to_message_id=None,
                       disable_web_page_preview=True):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    async with aiohttp.ClientSession() as session:
        # –ó–¥–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à —Ç–æ–∫–µ–Ω –∏ chat_id
        url = f"https://api.telegram.org/bot{config.cfg['TELEGRAM_TOKEN']}/sendMessage"
        payload = {
            'chat_id': user_id,  # –£–∫–∞–∂–∏—Ç–µ chat_id –≥—Ä—É–ø–ø—ã
            'text': text,
            'parse_mode': 'HTML',
            'disable_web_page_preview': disable_web_page_preview,
        }

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω message_thread_id, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ payload
        if message_thread_id is not None:
            payload['message_thread_id'] = message_thread_id

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω reply_to_message_id, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ payload –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if reply_to_message_id is not None:
            payload['reply_to_message_id'] = reply_to_message_id

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º InlineKeyboardMarkup –≤ JSON
        if reply_markup is not None:
            payload['reply_markup'] = reply_markup.to_dict()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç JSON –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏

        async with session.post(url, json=payload) as response:
            response_data = await response.json()
            if response.status == 200:
                logger.info("Message sent to Telegram successfully")
            else:
                logger.error(f"Failed to send message to Telegram: {response_data}")


async def send_location(user_id: int, latitude: float, longitude: float):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    async with aiohttp.ClientSession() as session:
        # –ó–¥–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à —Ç–æ–∫–µ–Ω –∏ chat_id
        url = f"https://api.telegram.org/bot{config.cfg['TELEGRAM_TOKEN']}/sendLocation"
        payload = {
            'chat_id': user_id,  # –£–∫–∞–∂–∏—Ç–µ chat_id –≥—Ä—É–ø–ø—ã
            'latitude': latitude,
            'longitude': longitude,
        }

        async with session.post(url, json=payload) as response:
            response_data = await response.json()
            if response.status == 200:
                logger.info("Message sent to Telegram successfully")
            else:
                logger.error(f"Failed to send message to Telegram: {response_data}")


async def send_photo(user_id: int, photo, reply_markup=None, message_thread_id=None, reply_to_message_id=None,
                     disable_web_page_preview=True):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    async with aiohttp.ClientSession() as session:
        # –ó–¥–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à —Ç–æ–∫–µ–Ω –∏ chat_id
        url = f"https://api.telegram.org/bot{config.cfg['TELEGRAM_TOKEN']}/sendPhoto"
        payload = {
            'chat_id': user_id,  # –£–∫–∞–∂–∏—Ç–µ chat_id –≥—Ä—É–ø–ø—ã
            'photo': text,
            'disable_web_page_preview': disable_web_page_preview,
        }

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω message_thread_id, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ payload
        if message_thread_id is not None:
            payload['message_thread_id'] = message_thread_id

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω reply_to_message_id, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ payload –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if reply_to_message_id is not None:
            payload['reply_to_message_id'] = reply_to_message_id

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º InlineKeyboardMarkup –≤ JSON
        if reply_markup is not None:
            payload['reply_markup'] = reply_markup.to_dict()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç JSON –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏

        async with session.post(url, json=payload) as response:
            response_data = await response.json()
            if response.status == 200:
                logger.info("Message sent to Telegram successfully")
            else:
                logger.error(f"Failed to send message to Telegram: {response_data}")


async def edit_reply_markup(chat_id: int, message_id: int, reply_markup: dict):
    """
    –ò–∑–º–µ–Ω—è–µ—Ç reply_markup –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.

    :param chat_id: ID —á–∞—Ç–∞.
    :param message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    :param reply_markup: –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–æ–∫ –∏ –∏—Ö callback_data.
    """
    async with aiohttp.ClientSession() as session:
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        url = f"https://api.telegram.org/bot{config.cfg['TELEGRAM_TOKEN']}/editMessageReplyMarkup"

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º reply_markup –≤ —Ñ–æ—Ä–º–∞—Ç JSON –¥–ª—è Telegram API
        inline_keyboard = [
            [{"text": text, "callback_data": callback_data}]
            for text, callback_data in reply_markup.items()
        ]
        payload = {
            'chat_id': chat_id,
            'message_id': message_id,
            'reply_markup': {"inline_keyboard": inline_keyboard}
        }

        async with session.post(url, json=payload) as response:
            response_data = await response.json()
            if response.status == 200 and response_data.get("ok"):
                logger.info("Reply markup updated successfully")
            else:
                logger.error(f"Failed to update reply markup: {response_data}")


async def delete_message(chat_id: int, message_id: int):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.

    :param chat_id: ID —á–∞—Ç–∞ (–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è), –æ—Ç–∫—É–¥–∞ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
    :param message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.
    """
    async with aiohttp.ClientSession() as session:
        url = f"https://api.telegram.org/bot{config.cfg['TELEGRAM_TOKEN']}/deleteMessage"
        payload = {
            'chat_id': chat_id,
            'message_id': message_id
        }

        async with session.post(url, json=payload) as response:
            response_data = await response.json()
            if response.status == 200 and response_data.get("ok"):
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ —É {chat_id}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} —É {chat_id}: {response_data}")


async def create_invite_link(chat_id: int, name: str = None, expire_date: int = None, member_limit: int = 1, creates_join_request: bool = False):
    """
    –°–æ–∑–¥–∞—ë—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É.

    :param chat_id: ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã (—Å `@` –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π).
    :param name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).
    :param expire_date: UNIX timestamp ‚Äî –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Å—Å—ã–ª–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç.
    :param member_limit: –ú–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Å—ã–ª–∫–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1).
    :param creates_join_request: –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False).
    :return: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    async with aiohttp.ClientSession() as session:
        url = f"https://api.telegram.org/bot{config.cfg['TELEGRAM_TOKEN']}/createChatInviteLink"
        payload = {
            'chat_id': chat_id,
            'member_limit': member_limit,
            'creates_join_request': creates_join_request
        }

        if name:
            payload['name'] = name
        if expire_date:
            payload['expire_date'] = expire_date

        async with session.post(url, json=payload) as response:
            response_data = await response.json()
            if response.status == 200 and response_data.get("ok"):
                invite_link = response_data['result']['invite_link']
                logger.info(f"üîó –°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {invite_link}")
                return response_data['result']
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {response_data}")
                return None