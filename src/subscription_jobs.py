import logging
from datetime import datetime, timedelta, timezone
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from setup import pdb
import payment
import config
import other_func

logger = logging.getLogger(__name__)


async def charge_subscription_job(context):
    """
    –ó–∞–¥–∞—á–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    job = context.job
    user_id = job.data['user_id']
    subscription_id = job.data['subscription_id']
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        subscription = pdb.get_subscription_by_id(subscription_id)
        if not subscription:
            logger.warning(f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ {subscription_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        if subscription['status'] != 'active':
            logger.warning(f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ {subscription_id} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ (—Å—Ç–∞—Ç—É—Å: {subscription['status']})")
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è
        new_order_code = other_func.generate_order_number()
        new_order_id = pdb.create_order(user_id=user_id, order_code=new_order_code)
        
        # –ü–æ–ª—É—á–∞–µ–º email –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ
        old_order_data = pdb.get_order_by_id(subscription['order_id'])
        if old_order_data and old_order_data['email']:
            pdb.update_order_email(new_order_id, old_order_data['email'])
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —Å –Ω–æ–≤—ã–º –∑–∞–∫–∞–∑–æ–º
        course = config.courses.get('course')
        if user_id == 146679674:
            price = 15
        else:
            price = course['price']

        await payment.create_recurring_payment_robokassa(
            price=price,
            email=old_order_data['email'] if old_order_data else '',
            num_of_chapter='course',
            order_code=new_order_code,
            order_id=new_order_id,
            user_id=user_id,
            previous_inv_id=old_order_data['order_code']
        )
        logger.info(f"‚úÖ –†–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç
        kick_job_name = f"kick_{subscription_id}_{user_id}"
        kick_time = datetime.now(timezone.utc) + timedelta(minutes=15)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ job_queue
        context.job_queue.run_once(
            kick_subscription_job,
            when=timedelta(minutes=15),
            data={'user_id': user_id, 'subscription_id': subscription_id},
            name=kick_job_name
        )
        
        # –î—É–±–ª–∏—Ä—É–µ–º –≤ –ë–î –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞
        try:
            db_job_id = pdb.schedule_job(user_id, subscription_id, 'kick', kick_time)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ {kick_job_name} (–ë–î ID: {db_job_id}) –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –ë–î: {e}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ charge job: {e}")
    finally:
        # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –≤ –ë–î
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ –ë–î –ø–æ subscription_id –∏ job_type
            with pdb.conn.cursor() as cursor:
                cursor.execute("""
                    SELECT job_id FROM scheduled_jobs 
                    WHERE subscription_id = %s AND job_type = 'charge' AND status = 'pending'
                    ORDER BY created_at DESC LIMIT 1
                """, (subscription_id,))
                result = cursor.fetchone()
                if result:
                    pdb.mark_job_done(result[0])
                    logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ charge {result[0]} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –≤ –ë–î")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∑–∞–¥–∞—á–∏ charge –≤ –ë–î: {e}")


async def kick_subscription_job(context):
    """
    –ó–∞–¥–∞—á–∞ –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞.
    """
    job = context.job
    user_id = job.data['user_id']
    subscription_id = job.data['subscription_id']
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë —Å—Ç–∞—Ç—É—Å
        subscription = pdb.get_subscription_by_id(subscription_id)
        if not subscription:
            logger.warning(f"‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ {subscription_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        if subscription['status'] == 'active':
            # –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –æ—Ç–º–µ–Ω—è–µ–º kick
            logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {subscription_id} –∞–∫—Ç–∏–≤–Ω–∞, kick –æ—Ç–º–µ–Ω–µ–Ω")
            return

        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø—Ä–æ–¥–ª–µ–Ω–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
        keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay_chapter")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=user_id,
            text="üîÑ –í—Ä–µ–º—è –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
            reply_markup=reply_markup
        )
        
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        pdb.update_subscription_status(subscription_id, 'expired')

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ kick job: {e}")
    finally:
        # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –≤ –ë–î
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ –ë–î –ø–æ subscription_id –∏ job_type
            now = datetime.now(timezone.utc)
            with pdb.conn.cursor() as cursor:
                cursor.execute("""
                    SELECT job_id FROM scheduled_jobs 
                    WHERE subscription_id = %s AND job_type = 'kick' AND status = 'pending'
                    ORDER BY created_at DESC LIMIT 1
                """, (subscription_id,))
                result = cursor.fetchone()
                if result:
                    pdb.mark_job_done(result[0])
                    logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {result[0]} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –≤ –ë–î")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∑–∞–¥–∞—á–∏ –≤ –ë–î: {e}")


async def notify_subscription_job(context):
    """
    –ó–∞–¥–∞—á–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    job = context.job
    user_id = job.data['user_id']
    
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text="üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç!"
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ notify job: {e}")


def schedule_subscription_jobs(context, user_id: int, subscription_id: int):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.
    
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    :param user_id: Telegram user ID
    :param subscription_id: ID –ø–æ–¥–ø–∏—Å–∫–∏
    """
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (—Ç–æ –∂–µ —á–∏—Å–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞)
        now = datetime.now(timezone.utc)
        if now.month == 12:
            # –ï—Å–ª–∏ –¥–µ–∫–∞–±—Ä—å, —Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü - —è–Ω–≤–∞—Ä—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–¥–∞
            next_month = now.replace(year=now.year + 1, month=1)
        else:
            # –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–µ—Å—è—Ü
            next_month = now.replace(month=now.month + 1)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        time_until_payment = next_month - now
        
        # –ó–∞–¥–∞—á–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ
        charge_job_name = f"charge_{subscription_id}_{user_id}"
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ job_queue
        context.job_queue.run_once(
            charge_subscription_job,
            when=time_until_payment,
            data={'user_id': user_id, 'subscription_id': subscription_id},
            name=charge_job_name
        )
        
        # –î—É–±–ª–∏—Ä—É–µ–º –≤ –ë–î –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞
        try:
            db_job_id = pdb.schedule_job(user_id, subscription_id, 'charge', next_month)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ {charge_job_name} (–ë–î ID: {db_job_id}) –Ω–∞ {next_month.strftime('%d.%m.%Y')}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –ë–î: {e}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏: {e}")


def cancel_subscription_jobs(context, subscription_id: int, user_id: int):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.
    
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    :param subscription_id: ID –ø–æ–¥–ø–∏—Å–∫–∏
    :param user_id: Telegram user ID
    """
    try:
        # –û—Ç–º–µ–Ω—è–µ–º charge –∑–∞–¥–∞—á—É
        charge_job_name = f"charge_{subscription_id}_{user_id}"
        current_jobs = context.job_queue.get_jobs_by_name(charge_job_name)
        for job in current_jobs:
            job.schedule_removal()
            logger.info(f"‚úÖ –û—Ç–º–µ–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {charge_job_name}")
        
        # –û—Ç–º–µ–Ω—è–µ–º kick –∑–∞–¥–∞—á—É
        kick_job_name = f"kick_{subscription_id}_{user_id}"
        current_jobs = context.job_queue.get_jobs_by_name(kick_job_name)
        for job in current_jobs:
            job.schedule_removal()
            logger.info(f"‚úÖ –û—Ç–º–µ–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {kick_job_name}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–∫–∏: {e}")


async def sync_job_queue_with_db(context):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç job_queue —Å –ë–î - –æ—á–∏—â–∞–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 04:00.
    """
    try:
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é job_queue —Å –ë–î")
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–æ–∫
        job_names_to_remove = []
        for job in context.job_queue.jobs():
            if job.name and (job.name.startswith("charge_") or job.name.startswith("kick_")):
                job.schedule_removal()
                job_names_to_remove.append(job.name)
        
        if job_names_to_remove:
            logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {job_names_to_remove}")
        else:
            logger.info("‚ÑπÔ∏è –ó–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        active_subscriptions = pdb.get_all_active_subscriptions()
        
        for subscription in active_subscriptions:
            user_id = subscription['user_id']
            subscription_id = subscription['subscription_id']
            next_payment_date = subscription['next_payment_date']
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            from datetime import timezone
            now = datetime.now(timezone.utc)
            time_until_payment = next_payment_date - now
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            if time_until_payment.total_seconds() > 0:
                charge_job_name = f"charge_{subscription_id}_{user_id}"
                context.job_queue.run_once(
                    charge_subscription_job,
                    when=time_until_payment,
                    data={'user_id': user_id, 'subscription_id': subscription_id},
                    name=charge_job_name
                )
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {charge_job_name} –Ω–∞ {next_payment_date.strftime('%d.%m.%Y %H:%M')}")
            else:
                # –í—Ä–µ–º—è —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
                charge_job_name = f"charge_{subscription_id}_{user_id}"
                context.job_queue.run_once(
                    charge_subscription_job,
                    when=timedelta(minutes=1),  # –ß–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
                    data={'user_id': user_id, 'subscription_id': subscription_id},
                    name=charge_job_name
                )
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞ {charge_job_name} (–ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω)")
        
        logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–±–∞–≤–ª–µ–Ω–æ {len(active_subscriptions)} –∑–∞–¥–∞—á")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ job_queue: {e}")


def schedule_daily_sync(context):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ 04:00.
    
    :param context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ 04:00
        now = datetime.now(timezone.utc)
        tomorrow_4am = now.replace(hour=4, minute=0, second=0, microsecond=0) + timedelta(days=1)
        time_until_4am = tomorrow_4am - now
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        context.job_queue.run_once(
            sync_job_queue_with_db,
            when=time_until_4am,
            data={},
            name="daily_sync"
        )
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –¥–µ–Ω—å
        context.job_queue.run_repeating(
            sync_job_queue_with_db,
            interval=timedelta(days=1),
            first=time_until_4am,
            data={},
            name="daily_sync_repeating"
        )
        
        logger.info(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ 04:00")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}") 