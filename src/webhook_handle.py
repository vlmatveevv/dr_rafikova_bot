from fastapi import FastAPI, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.responses import PlainTextResponse
import logging
import config
from other_func import escape_user_data
import telegram_https
from fastapi import Request
from setup import pdb, moscow_tz
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from jinja2 import Template

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    allow_credentials=True,
    allow_methods=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã
    allow_headers=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
)


@app.post("/webhook/yookassa/")
async def yookassa_webhook(request: Request, background_tasks: BackgroundTasks):
    data = await request.json()
    payment_object = data.get('object', {})
    payment_id = payment_object.get('id')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    if pdb.payment_exists(payment_id):
        logger.info(f"Payment {payment_id} already processed. Skipping.")
        return {"status": "ok"}

    amount = float(payment_object.get('amount', {}).get('value'))
    income_amount = float(
        payment_object.get('income_amount', {}).get('value', 0.0))  # –û–±—Ä–∞–±–æ—Ç–∫–∞, –µ—Å–ª–∏ income_amount –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    payment_method_type = payment_object.get('payment_method', {}).get('type', 'test')

    user_id = int(payment_object.get('metadata', {}).get('user_id'))
    chapter = payment_object.get('metadata', {}).get('chapter', '')
    order_id = int(payment_object.get('metadata', {}).get('order_id', ''))
    course = config.courses.get(chapter)

    channel_invite_url = course['channel_invite_link']
    group_invite_url = course.get('group_invite_link')
    channel_name = course['name']

    pdb.add_payment(external_payment_id=payment_id, amount=amount, income_amount=income_amount,
                    payment_method_type=payment_method_type, order_id=order_id)

    keyboard = [
        [InlineKeyboardButton("–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª ‚úÖ", url=channel_invite_url)],
        [InlineKeyboardButton("–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É ‚úÖ", url=group_invite_url)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await telegram_https.send_message(
        user_id=user_id,
        text=f"–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª <b>({channel_name}</b> –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
        reply_markup=reply_markup
    )
    return {"status": "ok"}


@app.post("/webhook/robokassa/", response_class=PlainTextResponse)
async def robokassa_webhook(request: Request, background_tasks: BackgroundTasks):
    form = await request.form()
    data = dict(form)
    logger.info(f"üì• Robokassa webhook data: {data}")

    try:
        inv_id = int(data.get("InvId"))  # –≠—Ç–æ order_code
        out_sum = float(data.get("OutSum", 0))
        payment_method_type = data.get("PaymentMethod", "unknown")
        fee = float(data.get("Fee", 0.0))
        income_amount = out_sum - fee

        user_id = int(data.get("shp_user_id"))
        order_id = int(data.get("shp_order_id"))
        formatted_chapter = data.get("shp_formatted_chapter")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ webhook
        subscription_type_param = data.get("shp_subscription_type", "regular")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Å—É–º–º–∞ 1 —Ä—É–±–ª—å, —Ç–æ —ç—Ç–æ —Ç–æ—á–Ω–æ —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        if out_sum == 1.0:
            subscription_type_param = "test"
            logger.info(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ —Å—É–º–º–µ –ø–ª–∞—Ç–µ–∂–∞: {out_sum} —Ä—É–±–ª—å")
        elif out_sum == 990.0:
            subscription_type_param = "regular"
            logger.info(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –æ–±—ã—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ —Å—É–º–º–µ –ø–ª–∞—Ç–µ–∂–∞: {out_sum} —Ä—É–±–ª–µ–π")
        else:
            logger.info(f"üîç –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: {out_sum} —Ä—É–±–ª–µ–π, —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {subscription_type_param}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω?
        if pdb.payment_exists_by_order_code(inv_id):
            logger.info(f"üîÅ –ü–ª–∞—Ç—ë–∂ –ø–æ order_code={inv_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return "OK"

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ (–µ—Å–ª–∏ –±—ã–ª–æ)
        try:
            payment_message_id = pdb.get_payment_message_id(order_id)
            background_tasks.add_task(
                telegram_https.delete_message,
                chat_id=user_id,
                message_id=payment_message_id
            )
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç—ë–∂
        pdb.add_payment(
            amount=out_sum,
            income_amount=income_amount,
            payment_method_type=payment_method_type,
            order_id=order_id
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
        existing_subscription = pdb.get_active_subscription(user_id)

        if existing_subscription:
            # –≠—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ - –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscription_type = "renewal"
            try:
                pdb.extend_subscription(existing_subscription['subscription_id'])
                logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {existing_subscription['subscription_id']} –ø—Ä–æ–¥–ª–µ–Ω–∞")
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")

                # –û—Ç–º–µ–Ω—è–µ–º kick –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                # –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ context –≤ webhook
                # Kick –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç –æ—Ç–º–µ–Ω–µ–Ω—ã –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤ kick_subscription_job
                logger.info(f"‚úÖ Kick –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç –æ—Ç–º–µ–Ω–µ–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                return "OK"
        else:
            # –≠—Ç–æ –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂ - —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscription_type = "new_sub"
            try:
                if subscription_type_param == "test":
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                    if out_sum != 1.0:
                        logger.error(f"‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –Ω–æ —Å—É–º–º–∞ {out_sum} —Ä—É–±–ª–µ–π (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1 —Ä—É–±–ª—å)")
                        return "OK"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
                    if not pdb.can_create_test_subscription(user_id):
                        logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É (—É–∂–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏)")
                        return "OK"
                    
                    subscription_id = pdb.create_test_subscription(user_id, order_id)
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ {subscription_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã –¥–ª—è –æ–±—ã—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                    if out_sum != 990.0:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–æ–±—ã—á–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: {out_sum} —Ä—É–±–ª–µ–π (–æ–∂–∏–¥–∞–ª–æ—Å—å 990 —Ä—É–±–ª–µ–π)")
                    
                    subscription_id = pdb.create_subscription(user_id, order_id)
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –æ–±—ã—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ {subscription_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                return "OK"

        # –£ –Ω–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫—É—Ä—Å
        course = config.courses.get('course')
        if not course:
            logger.warning(f"‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return "OK"

        course_names = [course["name"]]
        channel_name = course["name"]
        channel_invite_url = course["channel_invite_link"]
        group_invite_url = course.get("group_invite_link")

        keyboard = [
            [InlineKeyboardButton("–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª ‚úÖ", url=channel_invite_url)],
            [InlineKeyboardButton("–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É ‚úÖ", url=group_invite_url)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        if subscription_type_param == "test":
            message_text = config.bot_msg['test_sub']['activated'].format(channel_name=channel_name)
        else:
            message_text = config.bot_msg['payment_success'].format(channel_name=channel_name)

        background_tasks.add_task(
            telegram_https.send_message,
            user_id=user_id,
            text=message_text,
            reply_markup=reply_markup
        )

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = pdb.get_user_by_user_id(user_id)
        first_name = escape_user_data(user_info.get('first_name', ''))
        last_name = escape_user_data(user_info.get('last_name', ''))
        username = escape_user_data(user_info.get('username', ''))

        user_data = {
            "user_id": user_id,
            "full_name": f"{first_name} {last_name}".strip(),
            "username": username
        }

        # –†–µ–Ω–¥–µ—Ä–∏–º –±–ª–æ–∫ –ø—Ä–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_template_str = config.admin_msg['user_info_block']
        user_info_block = Template(user_template_str).render(**user_data)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if subscription_type_param == "test":
            admin_subscription_type = "test_sub"
            logger.info(f"üìä –ê–¥–º–∏–Ω—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞ {out_sum} —Ä—É–±–ª—å")
        else:
            admin_subscription_type = subscription_type
            logger.info(f"üìä –ê–¥–º–∏–Ω—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {subscription_type} –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞ {out_sum} —Ä—É–±–ª–µ–π")

        # –†–µ–Ω–¥–µ—Ä–∏–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_template_str = config.admin_msg['admin_payment_notification']
        admin_payment_notification_text = Template(admin_template_str).render(
            user_info_block=user_info_block,
            channel_names=course_names,
            out_sum=out_sum,
            payment_method_type=payment_method_type,
            income_amount=income_amount,
            user_id=user_id,
            order_code=inv_id,
            formatted_chapters=['course'],
            subscription_type=admin_subscription_type
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        background_tasks.add_task(
            telegram_https.send_message,
            user_id=config.cfg['ADMIN_CHAT_ID']['MAIN'],
            text=admin_payment_notification_text,
            message_thread_id=config.cfg['ADMIN_CHAT_ID']['PAYMENTS']
        )

        logger.info(f"‚úÖ –ü–ª–∞—Ç—ë–∂ InvId={inv_id} –æ—Ç user_id={user_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        return "OK"

    except Exception as e:
        logger.error(f"‚ùó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Robokassa webhook: {e}")
        return "OK"
