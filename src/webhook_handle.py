from fastapi import FastAPI, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.responses import PlainTextResponse
import logging
import config
import payment
import telegram_https
from fastapi import Request
from setup import pdb, moscow_tz
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    allow_credentials=True,
    allow_methods=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Å–µ –º–µ—Ç–æ–¥—ã
    allow_headers=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ—Ç –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
)


@app.post("/webhook/yookassa/")
async def yookassa_webhook(request: Request, background_tasks: BackgroundTasks):
    data = await request.json()
    payment_object = data.get('object', {})
    payment_id = payment_object.get('id')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    if pdb.payment_exists(payment_id):
        logger.info(f"Payment {payment_id} already processed. Skipping.")
        return {"status": "ok"}

    amount = float(payment_object.get('amount', {}).get('value'))
    income_amount = float(
        payment_object.get('income_amount', {}).get('value', 0.0))  # –û–±—Ä–∞–±–æ—Ç–∫–∞, –µ—Å–ª–∏ income_amount –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    payment_method_type = payment_object.get('payment_method', {}).get('type', 'test')

    user_id = int(payment_object.get('metadata', {}).get('user_id'))
    chapter = payment_object.get('metadata', {}).get('chapter', '')
    order_id = int(payment_object.get('metadata', {}).get('order_id', ''))
    course = config.courses.get(chapter)

    channel_invite_url = course['channel_invite_link']
    channel_name = course['name']

    pdb.add_payment(external_payment_id=payment_id, amount=amount, income_amount=income_amount,
                          payment_method_type=payment_method_type, order_id=order_id)

    keyboard = [
        [InlineKeyboardButton("–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª ‚úÖ", url=channel_invite_url)],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await telegram_https.send_message(
        user_id=user_id,
        text=f"–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª <b>({channel_name}</b> –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
        reply_markup=reply_markup
    )
    return {"status": "ok"}


@app.post("/webhook/robokassa/", response_class=PlainTextResponse)
async def robokassa_webhook(request: Request, background_tasks: BackgroundTasks):
    form = await request.form()
    data = dict(form)
    logger.info(f"üì• Robokassa webhook data: {data}")

    try:
        inv_id = int(data.get("InvId"))  # –≠—Ç–æ order_code
        out_sum = float(data.get("OutSum", 0))
        payment_method_type = data.get("PaymentMethod", "unknown")
        fee = float(data.get("Fee", 0.0))

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ shp_
        user_id = int(data.get("shp_user_id"))
        order_id = int(data.get("shp_order_id"))
        formatted_chapter = data.get("shp_formatted_chapter")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ order_code (inv_id)
        if pdb.payment_exists_by_order_code(inv_id):
            logger.info(f"üîÅ –ü–ª–∞—Ç—ë–∂ –ø–æ order_code={inv_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return "OK"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É—Ä—Å–∞
        course = config.courses.get(formatted_chapter)
        if not course:
            logger.error(f"‚ùå –ö—É—Ä—Å –ø–æ –∫–ª—é—á—É '{formatted_chapter}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return "OK"

        channel_name = course["name"]
        channel_invite_url = course["channel_invite_link"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç—ë–∂
        pdb.add_payment(
            amount=out_sum,
            income_amount=out_sum - fee,
            payment_method_type=payment_method_type,
            order_id=order_id
        )

        # –ö–Ω–æ–ø–∫–∞ + —Å–æ–æ–±—â–µ–Ω–∏–µ
        keyboard = [[InlineKeyboardButton("–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª ‚úÖ", url=channel_invite_url)]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        background_tasks.add_task(
            telegram_https.send_message,
            user_id=user_id,
            text=f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –∫—É—Ä—Å <b>{channel_name}</b>!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª:",
            reply_markup=reply_markup
        )

        logger.info(f"‚úÖ –ü–ª–∞—Ç—ë–∂ InvId={inv_id} –æ—Ç user_id={user_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        return "OK"

    except Exception as e:
        logger.error(f"‚ùó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Robokassa webhook: {e}")
        return "OK"