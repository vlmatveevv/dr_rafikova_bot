#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π —Å —Ç—Ä–µ–º—è –ø–æ–ø—ã—Ç–∫–∞–º–∏.
"""

import asyncio
import logging
from datetime import datetime, timedelta, timezone
from setup import pdb

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_subscription_logic():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.
    """
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_user_id = 123456789
        test_subscription_id = 1
        
        logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        subscription = pdb.get_subscription_by_id(test_subscription_id)
        if not subscription:
            logger.warning(f"‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ {test_subscription_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {subscription}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        current_attempts = pdb.get_charge_attempts(test_subscription_id)
        logger.info(f"üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {current_attempts}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫
        pdb.increment_charge_attempts(test_subscription_id)
        new_attempts = pdb.get_charge_attempts(test_subscription_id)
        logger.info(f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ—Å–ª–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è: {new_attempts}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±—Ä–æ—Å –ø–æ–ø—ã—Ç–æ–∫
        pdb.reset_charge_attempts(test_subscription_id)
        reset_attempts = pdb.get_charge_attempts(test_subscription_id)
        logger.info(f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: {reset_attempts}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º 3 –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        logger.info("üîÑ –°–∏–º—É–ª–∏—Ä—É–µ–º 3 –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–ø–∏—Å–∞–Ω–∏—è...")
        for i in range(3):
            pdb.increment_charge_attempts(test_subscription_id)
            attempts = pdb.get_charge_attempts(test_subscription_id)
            logger.info(f"   –ü–æ–ø—ã—Ç–∫–∞ {i+1}: {attempts} –ø–æ–ø—ã—Ç–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω
        final_attempts = pdb.get_charge_attempts(test_subscription_id)
        if final_attempts >= 3:
            logger.info(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {final_attempts}")
            logger.info("‚úÖ –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —Ç–µ—Å—Ç–∞
        pdb.reset_charge_attempts(test_subscription_id)
        logger.info("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")


async def test_database_methods():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        test_user_id = 999999999
        test_order_id = 999999999
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        logger.info("üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ get_charge_attempts...")
        attempts = pdb.get_charge_attempts(1)  # –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {attempts}")
        
        logger.info("üìà –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ increment_charge_attempts...")
        pdb.increment_charge_attempts(1)
        new_attempts = pdb.get_charge_attempts(1)
        logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {new_attempts}")
        
        logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ reset_charge_attempts...")
        pdb.reset_charge_attempts(1)
        reset_attempts = pdb.get_charge_attempts(1)
        logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {reset_attempts}")
        
        logger.info("‚úÖ –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ—Ç–æ–¥–æ–≤ –ë–î: {e}")


async def test_first_payment_logic():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö —Å–ø–∏—Å–∞–Ω–∏–π.
    """
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞")
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        test_subscription_id = 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        logger.info("üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ get_first_payment_for_subscription...")
        first_payment = pdb.get_first_payment_for_subscription(test_subscription_id)
        logger.info(f"   –ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {test_subscription_id}: {first_payment}")
        
        if first_payment:
            logger.info("‚úÖ –ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö —Å–ø–∏—Å–∞–Ω–∏–π")
        else:
            logger.warning("‚ö†Ô∏è –ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription = pdb.get_subscription_by_id(test_subscription_id)
        if subscription:
            logger.info(f"   –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: order_id = {subscription['order_id']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑
            order = pdb.get_order_by_id(subscription['order_id'])
            if order:
                logger.info(f"   –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω: order_code = {order['order_code']}")
            else:
                logger.warning("‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        logger.info("‚úÖ –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–∏–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")


if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ª–æ–≥–∏–∫–∏ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(test_database_methods())
    asyncio.run(test_subscription_logic())
    asyncio.run(test_first_payment_logic())
    
    logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã") 