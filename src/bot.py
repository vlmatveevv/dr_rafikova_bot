import asyncio
import json
import locale
import logging
import traceback
import html
import re
import time as time_new
from datetime import time, datetime, timedelta
from pathlib import Path

import pytz
import telegram
import other_func
from setup import pdb
import config
import yaml
import keyboard as my_keyboard
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, BotCommand, ReplyKeyboardMarkup, \
    ReplyKeyboardRemove, KeyboardButton, InputMediaPhoto, InputMediaDocument
from telegram.constants import ParseMode, ChatAction
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    CallbackContext,
    MessageHandler,
    TypeHandler,
    JobQueue,
    AIORateLimiter,
    ChatJoinRequestHandler,
    filters)

import payment

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏
locale.setlocale(locale.LC_TIME, ('ru_RU', 'UTF-8'))

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ú–°–ö
moscow_tz = pytz.timezone('Europe/Moscow')

# –≠—Ç–æ —Å–ª–æ–≤–∞—Ä—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
allowed_users = {
    7768888247: "Roman"
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –ª–æ–≥–∞—Ö
def custom_time(*args):
    utc_dt = pytz.utc.localize(datetime.utcnow())
    converted = utc_dt.astimezone(moscow_tz)
    return converted.timetuple()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —É—Ä–æ–≤–Ω—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logging.Formatter.converter = custom_time
# –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
# –ü–æ–ª—É—á–∏—Ç–µ –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è 'httpx'
logger_for_httpx = logging.getLogger('httpx')
# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ WARNING, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å INFO –∏ DEBUG —Å–æ–æ–±—â–µ–Ω–∏—è
logger_for_httpx.setLevel(logging.WARNING)

AGREE_OFFER, AGREE_PRIVACY, AGREE_NEWSLETTER, ASK_EMAIL = range(4)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email
def is_valid_email(email: str) -> bool:
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ email
    pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    return re.match(pattern, email) is not None


async def user_exists_pdb(user_id: int) -> bool:
    return pdb.user_exists(user_id)


async def send_or_edit_message(update: Update, context: CallbackContext, text: str,
                               reply_markup: InlineKeyboardMarkup = None, new_message=False):
    if new_message:
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        return
    if update.callback_query:
        if update.callback_query.message.text:
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
        else:
            await update.callback_query.message.delete()
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
    else:
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )


async def register(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    first_name = update.effective_user.first_name or ""
    last_name = update.effective_user.last_name or ""
    username = update.effective_chat.username or ""

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    if not await user_exists_pdb(user_id):
        pdb.add_user(user_id, username, first_name, last_name)

    keyboard = [[InlineKeyboardButton(config.bot_btn['buy_courses'], callback_data='buy_courses')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=user_id,
        text=f"{config.bot_msg['hello'].format(first_name=first_name)}",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

    return ConversationHandler.END


async def my_courses_command(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã
    available_courses = pdb.get_all_user_courses(user_id)

    if not available_courses:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤."

        reply_markup = InlineKeyboardMarkup(my_keyboard.main_menu_button_markup())
        await send_or_edit_message(update, context, text, reply_markup)
        return

    keyboard = []

    for course_key in available_courses:
        course = config.courses.get(course_key)
        if course:
            keyboard = my_keyboard.ch_choose_button(available_courses)

    keyboard.extend(my_keyboard.main_menu_button_markup())  # <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = "–í–∞—à–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã. –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏:"
    await send_or_edit_message(update, context, text, reply_markup)


async def my_courses_callback_handle(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    await my_courses_command(update, context)


async def all_courses_command(update: Update, context: CallbackContext) -> None:
    # keyboard = []

    # for key, course in config.courses.items():
    #     num_of_chapter = key.split('_')[1]
    #     button = InlineKeyboardButton(
    #         text=course['name'],
    #         callback_data=f'buy_chapter:{num_of_chapter}'
    #     )
    #     keyboard.append([button])
    keyboard = my_keyboard.ch_choose_button()

    keyboard.extend(my_keyboard.main_menu_button_markup())  # <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = config.bot_msg['choose_chapter']
    await send_or_edit_message(update, context, text, reply_markup)


async def all_courses_callback_handle(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    await all_courses_command(update, context)


async def documents_command(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    person_info_text = config.other_cfg["person_info"]
    offer_text = f'<a href="{config.other_cfg["links"]["offer"]}">–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Ñ–µ—Ä—Ç–æ–π</a>'
    privacy_text = f'<a href="{config.other_cfg["links"]["privacy"]}">–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a>'
    consent_text = f'<a href="{config.other_cfg["links"]["consent"]}">–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏</a>'
    chargeback_text = f'<a href="{config.other_cfg["links"]["chargeback"]}">–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∑–∞—è–≤–ª–µ–Ω–∏–µ–º –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤</a>'
    text = person_info_text + "\n\n" + offer_text + "\n\n" + privacy_text + "\n\n" + consent_text + "\n\n" + chargeback_text

    keyboard = [
        [InlineKeyboardButton("üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_or_edit_message(update, context, text, reply_markup)


async def documents_callback_handle(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    await documents_command(update, context)


async def support_command(update: Update, context: CallbackContext) -> None:
    text = config.bot_msg['support']
    reply_markup = InlineKeyboardMarkup(my_keyboard.main_menu_button_markup())
    await send_or_edit_message(update, context, text, reply_markup)


async def support_callback_handle(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    await support_command(update, context)


async def main_menu_callback_handle(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        text="üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=my_keyboard.main_menu_items_button_markup(),
        parse_mode=ParseMode.HTML
    )


# –ü–æ–∫—É–ø–∫–∞ –∫—É—Ä—Å–æ–≤ (—Å–ø–∏—Å–æ–∫)
async def buy_courses_callback_handle(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    reply_markup = InlineKeyboardMarkup(my_keyboard.ch_choose_button())
    await query.edit_message_text(
        text=config.bot_msg['choose_chapter'],
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )


# –î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
async def buy_chapter_callback_handle(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    num_of_chapter = query.data.split(':')[1]

    chapter_mask = f'ch_{num_of_chapter}'
    course = config.courses.get(chapter_mask)

    if not course:
        await query.edit_message_text("–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    text = config.bot_msg['buy_chapter_info'].format(
        name=course['name'] + course['emoji'],
        description=course['description'],
        price=course['price']
    )

    keyboard = []

    if pdb.has_paid_course(user_id, chapter_mask) or pdb.has_manual_access(user_id, chapter_mask):
        keyboard.append([
            InlineKeyboardButton(config.bot_btn['go_to_channel'], url=course['channel_invite_link'])
        ])
    else:
        keyboard.append([
            InlineKeyboardButton(config.bot_btn['go_to_pay'], callback_data=f'pay_chapter:{num_of_chapter}')
        ])

    keyboard.append([
        InlineKeyboardButton(config.bot_btn['go_back'], callback_data='buy_courses')
    ])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )


# –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ
async def pay_chapter_callback_handle(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    num_of_chapter = query.data.split(':')[1]
    course_mask = f'ch_{num_of_chapter}'
    course = config.courses.get(course_mask)

    if not course:
        await query.edit_message_text("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    order_code = other_func.generate_order_number()
    order_id = pdb.create_order(user_id=user_id, course_chapter=course_mask, order_code=order_code)
    context.user_data['selected_course'] = course
    context.user_data['chapter_number'] = num_of_chapter
    context.user_data['order_id'] = order_id

    context.user_data['is_in_conversation'] = True

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é", callback_data=f"agree_offer:{order_code}")],
        [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text="üìÑ –Ø –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è –∏ –ø—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è –ü—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã.\n\n"
             f'<a href="{config.other_cfg["links"]["offer"]}">–û—Ç–∫—Ä—ã—Ç—å –æ—Ñ–µ—Ä—Ç—É</a>',
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )
    return AGREE_OFFER


# –®–∞–≥ 2 ‚Äî —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î–Ω
async def handle_offer_agree(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    order_code = query.data.split(':')[1]
    pdb.update_agreed_offer(order_code, True)

    keyboard = [[InlineKeyboardButton("‚úÖ –î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ", callback_data=f"agree_privacy:{order_code}")],
                [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data='cancel')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text='üîê –Ø –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n'
             f'<a href="{config.other_cfg["links"]["privacy"]}">–ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö</a>',
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )
    return AGREE_PRIVACY


# –®–∞–≥ 3 ‚Äî —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
async def handle_privacy_agree(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    order_code = query.data.split(':')[1]
    pdb.update_agreed_privacy(order_code, True)

    keyboard = [
        [InlineKeyboardButton("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data=f"agree_newsletter:{order_code}")],
        [InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data=f"disagree_newsletter:{order_code}")],
        [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text="üì¨ –Ø –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
             f'<a href="{config.other_cfg["links"]["consent"]}">–î–æ–∫—É–º–µ–Ω—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ</a>',
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )
    return AGREE_NEWSLETTER


# –®–∞–≥ 4 ‚Äî e-mail
async def handle_newsletter_agree(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    agreement_newsletter, order_code = query.data.split(':')
    if agreement_newsletter == 'agree_newsletter':
        agreement_newsletter_bool = True
    else:
        agreement_newsletter_bool = False

    keyboard = [
        [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    email_msg = await query.edit_message_text(text="üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à e-mail –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞:",
                                              reply_markup=reply_markup)
    pdb.update_agreed_newsletter(order_code, agreement_newsletter_bool)

    context.user_data['email_msg'] = email_msg
    context.user_data['order_code'] = order_code
    return ASK_EMAIL


# –®–∞–≥ 5 ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ e-mail –∏ –æ–ø–ª–∞—Ç–∞
async def ask_email_handle(update: Update, context: CallbackContext) -> int:
    logger.info("üì® –ü–æ–ª—É—á–µ–Ω email –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    email = update.message.text.strip()

    if not is_valid_email(email):
        keyboard = [
            [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail:",
                                        reply_markup=reply_markup)
        return ASK_EMAIL

    order_code = context.user_data['order_code']
    order_id = context.user_data['order_id']
    pdb.update_email(order_code, email)
    context.user_data['email'] = email
    email_msg = context.user_data.get('email_msg')
    user_id = update.effective_user.id

    try:
        if email_msg:
            await context.bot.delete_message(chat_id=user_id, message_id=email_msg.message_id)
        await update.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    course = context.user_data['selected_course']
    num = context.user_data['chapter_number']

    text = config.bot_msg['confirm_purchase'].format(
        email=email,
        name=course['name'] + course['emoji'],
        num=num,
        price=course['price'],
    )

    payment_url = payment.create_payment_robokassa(
        price=course['price'],
        email=email,
        num_of_chapter=num,
        order_code=order_code,
        order_id=order_id,
        user_id=user_id
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
        # [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É", callback_data=f'upd_payment_url:{order_code}')],
        [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    payment_message = await update.message.chat.send_message(
        text=text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    payment_message_id = payment_message.message_id
    pdb.update_payment_message_id(order_code, payment_message_id)

    context.user_data.clear()
    return ConversationHandler.END


# –û—Ç–º–µ–Ω–∞
async def cancel_payment_handle(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    context.user_data.clear()
    keyboard = [
        [InlineKeyboardButton("üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text="–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ.",
                                  reply_markup=reply_markup)
    return ConversationHandler.END


async def upd_payment_url_handle(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data

    order_code = data.split(':')[1]
    order_data = pdb.get_order_by_code(int(order_code))

    course = config.courses.get(order_data['course_chapter'])
    user_id = order_data['user_id']
    email = order_data['email']
    num = order_data['course_chapter'].split('_')[1]
    order_id = order_data['order_id']

    payment_url = await payment.create_payment(
        price=course['price'],
        user_id=user_id,
        email=email,
        num_of_chapter=num,
        order_id=order_id,
        order_code=order_code
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    payment_message = await query.edit_message_text(
        text=config.bot_msg['confirm_purchase'].format(
            email=email,
            name=course['name'] + course['emoji'],
            num=num,
            price=course['price'],
        ),
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

    payment_message_id = payment_message.message_id
    pdb.update_payment_message_id(order_code, payment_message_id)


async def handle_join_request(update: Update, context: CallbackContext):
    join_request = update.chat_join_request
    user_id = join_request.from_user.id
    chat_id = update.chat_join_request.chat.id
    if user_id == 146679674:
        await join_request.approve()
        return
    channel_data = config.channel_map.get(chat_id)

    if channel_data:
        name = channel_data.get('name')
        channel_invite_link = channel_data.get('channel_invite_link')
    else:
        return

    course_key = config.channel_id_to_key.get(chat_id)
    logger.info(f"course_key! = {course_key}")

    if pdb.has_manual_access(user_id, course_key) or pdb.has_paid_course(user_id, course_key):
        await join_request.approve()
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=channel_invite_link)],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=user_id,
            text=f"–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª ({name}) –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
            reply_markup=reply_markup
        )
        logger.info(f"‚úÖ –û–¥–æ–±—Ä–µ–Ω –≤—Ö–æ–¥ –¥–ª—è {allowed_users[user_id]} ({user_id})")
    else:
        await join_request.decline()
        keyboard = [
            [InlineKeyboardButton("‚úÖ –í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø", callback_data=f"grant_access:{user_id}:{course_key}")],
            [InlineKeyboardButton("‚ùå –ù–µ –≤—ã–¥–∞–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø", callback_data=f"deny_access:{user_id}:{course_key}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=config.cfg['ADMIN_CHAT_ID']['MAIN'],
            text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ {name}. –•–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –µ–º—É –¥–æ—Å—Ç—É–ø?",
            reply_markup=reply_markup,
            message_thread_id=config.cfg['ADMIN_CHAT_ID']['DECLINED_REQUESTS']
        )


async def grant_manual_access_handle(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    _, user_id_str, course_key = query.data.split(":")
    user_id = int(user_id_str)
    admin_id = query.from_user.id
    course = config.courses.get(course_key)
    name = course['name'] + course['emoji']
    # –î–æ–±–∞–≤–∏–º –¥–æ—Å—Ç—É–ø –≤ manual_access
    try:
        pdb.grant_manual_access(user_id=user_id, course_chapter=course_key, granted_by=admin_id)
        await query.edit_message_text(f"‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∫ –∫—É—Ä—Å—É {name} —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω. –¢–µ–ø–µ—Ä—å –µ–º—É –Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø.")


async def deny_manual_access(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    _, user_id_str, course_key = query.data.split(":")
    await query.edit_message_text(f"‚õîÔ∏è –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –¥–æ—Å—Ç—É–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_str} –∫ –∫—É—Ä—Å—É {course_key}.")


async def error_handler(update: object, context: CallbackContext) -> None:
    logger.error("Exception while handling an update:", exc_info=context.error)

    tb_list = traceback.format_exception(None, context.error, context.error.__traceback__)
    tb_string = "".join(tb_list)

    update_str = update.to_dict() if isinstance(update, Update) else str(update)
    message_base = (
        "An exception was raised while handling an update\n"
        f"<pre>update = {html.escape(json.dumps(update_str, indent=2, ensure_ascii=False))}</pre>\n\n"
        f"<pre>context.chat_data = {html.escape(str(context.chat_data))}</pre>\n\n"
        f"<pre>context.user_data = {html.escape(str(context.user_data))}</pre>\n\n"
    )

    # –†–∞–∑–±–∏–µ–Ω–∏–µ tb_string –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤
    max_length = 4096 - len(message_base) - 100  # –í—ã—á–∏—Ç–∞–µ–º –¥–ª–∏–Ω—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –º–µ—Å—Ç–æ
    parts = [tb_string[i:i + max_length] for i in range(0, len(tb_string), max_length)]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    await context.bot.send_message(
        chat_id=config.cfg['ADMIN_CHAT_ID']['MAIN'], text=message_base, parse_mode=ParseMode.HTML,
        message_thread_id=config.cfg['ADMIN_CHAT_ID']['LOGS']
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å traceback –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
    for part in parts:
        message = f"<pre>{html.escape(part)}</pre>"
        await context.bot.send_message(
            chat_id=config.cfg['ADMIN_CHAT_ID']['MAIN'], text=message, parse_mode=ParseMode.HTML,
            message_thread_id=config.cfg['ADMIN_CHAT_ID']['LOGS']
        )


async def post_init(application: Application) -> None:
    # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ main_menu
    menu_commands = [
        BotCommand(f"/{key}", value) for key, value in config.bot_btn['main_menu'].items()
    ]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–∏ 3 –∫–æ–º–∞–Ω–¥—ã
    await application.bot.set_my_commands(menu_commands)


buy_course_conversation = ConversationHandler(
    entry_points=[CallbackQueryHandler(pay_chapter_callback_handle, pattern="^pay_chapter:")],
    states={
        AGREE_OFFER: [CallbackQueryHandler(handle_offer_agree, pattern="^agree_offer:")],
        AGREE_PRIVACY: [CallbackQueryHandler(handle_privacy_agree, pattern="^agree_privacy:")],
        AGREE_NEWSLETTER: [CallbackQueryHandler(handle_newsletter_agree,
                                                pattern="^(agree_newsletter:|disagree_newsletter:)")],
        ASK_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_email_handle)],
    },
    fallbacks=[CallbackQueryHandler(cancel_payment_handle, pattern="^cancel$")],
    allow_reentry=True
)


def run():
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ RateLimiter
    rate_limiter = AIORateLimiter(
        overall_max_rate=30,  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –Ω–∞ –≤—Å–µ–≥–æ –±–æ—Ç–∞
        overall_time_period=1,  # –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        group_max_rate=20,  # –ú–∞–∫—Å–∏–º—É–º 20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É –Ω–∞ –≥—Ä—É–ø–ø—É
        group_time_period=60  # –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    )

    application = (
        ApplicationBuilder()
        .token(config.config_env['TELEGRAM_TOKEN'])
        .read_timeout(60)
        .write_timeout(60)
        .concurrent_updates(True)
        .rate_limiter(rate_limiter)
        .post_init(post_init)
        .build()
    )

    application.add_handler(CommandHandler('start', register))
    application.add_handler(CommandHandler('my_courses', my_courses_command))
    application.add_handler(CommandHandler('all_courses', all_courses_command))
    application.add_handler(CommandHandler('documents', documents_command))
    application.add_handler(CommandHandler('support', support_command))

    application.add_handler(CallbackQueryHandler(buy_courses_callback_handle, pattern="^buy_courses$"))
    application.add_handler(CallbackQueryHandler(buy_chapter_callback_handle, pattern="^buy_chapter:"))
    application.add_handler(CallbackQueryHandler(upd_payment_url_handle, pattern="^upd_payment_url:"))

    application.add_handler(CallbackQueryHandler(main_menu_callback_handle, pattern="^main_menu$"))
    application.add_handler(CallbackQueryHandler(my_courses_callback_handle, pattern="^my_courses$"))
    application.add_handler(CallbackQueryHandler(all_courses_callback_handle, pattern="^all_courses$"))
    application.add_handler(CallbackQueryHandler(documents_callback_handle, pattern="^documents$"))
    application.add_handler(CallbackQueryHandler(support_callback_handle, pattern="^support$"))

    application.add_handler(CallbackQueryHandler(grant_manual_access_handle, pattern="^grant_access:"))
    application.add_handler(CallbackQueryHandler(deny_manual_access, pattern="^deny_access:"))

    application.add_handler(buy_course_conversation)
    application.add_handler(ChatJoinRequestHandler(handle_join_request))
    application.add_error_handler(error_handler)

    logger.addHandler(logging.StreamHandler())

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    run()
