import asyncio
import json
import locale
import logging
import traceback
import html
import re
import time as time_new
from datetime import time, datetime, timedelta
from pathlib import Path

import pytz
import telegram
from setup import pdb
import config
import yaml
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, BotCommand, ReplyKeyboardMarkup, \
    ReplyKeyboardRemove, KeyboardButton, InputMediaPhoto, InputMediaDocument
from telegram.constants import ParseMode, ChatAction
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    CallbackContext,
    MessageHandler,
    TypeHandler,
    JobQueue,
    AIORateLimiter,
    filters)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏
locale.setlocale(locale.LC_TIME, ('ru_RU', 'UTF-8'))

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ú–°–ö
moscow_tz = pytz.timezone('Europe/Moscow')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –ª–æ–≥–∞—Ö
def custom_time(*args):
    utc_dt = pytz.utc.localize(datetime.utcnow())
    converted = utc_dt.astimezone(moscow_tz)
    return converted.timetuple()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —É—Ä–æ–≤–Ω—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logging.Formatter.converter = custom_time
# –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
# –ü–æ–ª—É—á–∏—Ç–µ –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è 'httpx'
logger_for_httpx = logging.getLogger('httpx')
# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ WARNING, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å INFO –∏ DEBUG —Å–æ–æ–±—â–µ–Ω–∏—è
logger_for_httpx.setLevel(logging.WARNING)


async def user_exists_pdb(user_id: int) -> bool:
    return pdb.user_exists(user_id)


async def register(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    first_name = update.effective_user.first_name or ""
    last_name = update.effective_user.last_name or ""
    username = update.effective_chat.username or ""
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if not await user_exists_pdb(user_id):
        pdb.add_user(user_id, username, first_name, last_name)

    keyboard = [[InlineKeyboardButton(config.bot_btn['buy_courses'], callback_data='buy_courses')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await context.bot.send_message(chat_id=user_id,
                                   text=f"Hello, {first_name}",
                                   reply_markup=reply_markup,
                                   parse_mode=ParseMode.HTML)


async def buy_courses_callback_handle(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    keyboard = []
    for key, course in config.courses.items():
        num_of_chapter = key.split('_')[1]  # –ù–∞–ø—Ä–∏–º–µ—Ä, "1" –∏–∑ "ch_1"
        button_text = course['name']  # –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑ YAML: "1. –ü–û–î–ì–û–¢–û–í–ö–ê –ò –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ë–ï–†–ï–ú–ï–ù–ù–û–°–¢–ò"
        button = InlineKeyboardButton(
            text=button_text,
            callback_data=f'buy_chapter:{num_of_chapter}'
        )
        keyboard.append([button])  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        text=config.bot_msg['choose_chapter'],
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )


async def buy_chapter_callback_handle(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞ –∏–∑ callback_data
    num_of_chapter = query.data.split(':')[1]

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ
    chapter_key = f'ch_{num_of_chapter}'
    course = config.courses['courses'].get(chapter_key)

    if not course:
        await query.edit_message_text("–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = config.bot_msg['buy_chapter_info'].format(
        description=course['description'],
        price=course['price'],
        name=course['name']
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f'pay_chapter:{num_of_chapter}')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='buy_courses')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )


def run():
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ RateLimiter
    rate_limiter = AIORateLimiter(
        overall_max_rate=30,  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –Ω–∞ –≤—Å–µ–≥–æ –±–æ—Ç–∞
        overall_time_period=1,  # –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        group_max_rate=20,  # –ú–∞–∫—Å–∏–º—É–º 20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É –Ω–∞ –≥—Ä—É–ø–ø—É
        group_time_period=60  # –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    )

    application = (
        ApplicationBuilder()
        .token(config.config_env['TELEGRAM_TOKEN'])
        .read_timeout(60)
        .write_timeout(60)
        .concurrent_updates(True)
        .rate_limiter(rate_limiter)
        .build()
    )

    application.add_handler(CommandHandler('start', register))
    application.add_handler(CallbackQueryHandler(buy_courses_callback_handle, pattern="^buy_courses$"))
    application.add_handler(CallbackQueryHandler(buy_chapter_callback_handle(), pattern="^buy_chapter:"))

    logger.addHandler(logging.StreamHandler())

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    run()
