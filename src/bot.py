import asyncio
import json
import locale
import logging
import traceback
import html
import re
import time as time_new
from datetime import time, datetime, timedelta, timezone
from pathlib import Path

import pytz
import telegram
import other_func
from telegram_func import send_or_edit_message, send_or_edit_photo
from setup import pdb
import config
import yaml
import keyboard as my_keyboard
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, BotCommand, ReplyKeyboardMarkup, \
    ReplyKeyboardRemove, KeyboardButton, InputMediaPhoto, InputMediaDocument
from telegram.constants import ParseMode, ChatAction
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    CallbackContext,
    MessageHandler,
    TypeHandler,
    JobQueue,
    AIORateLimiter,
    ChatJoinRequestHandler,
    filters)

import payment
from subscription_jobs import schedule_subscription_jobs, cancel_subscription_jobs, schedule_daily_sync, \
    sync_job_queue_with_db

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏
locale.setlocale(locale.LC_TIME, ('ru_RU', 'UTF-8'))

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ú–°–ö
moscow_tz = pytz.timezone('Europe/Moscow')

# –≠—Ç–æ —Å–ª–æ–≤–∞—Ä—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
allowed_users = {
    7768888247: "Roman"
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –ª–æ–≥–∞—Ö
def custom_time(*args):
    utc_dt = pytz.utc.localize(datetime.utcnow())
    converted = utc_dt.astimezone(moscow_tz)
    return converted.timetuple()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —É—Ä–æ–≤–Ω—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logging.Formatter.converter = custom_time
# –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
# –ü–æ–ª—É—á–∏—Ç–µ –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è 'httpx'
logger_for_httpx = logging.getLogger('httpx')
# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ WARNING, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å INFO –∏ DEBUG —Å–æ–æ–±—â–µ–Ω–∏—è
logger_for_httpx.setLevel(logging.WARNING)

AGREE_OFFER, AGREE_PRIVACY, AGREE_NEWSLETTER, ASK_EMAIL = range(4)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email
def is_valid_email(email: str) -> bool:
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ email
    pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    return re.match(pattern, email) is not None


async def user_exists_pdb(user_id: int) -> bool:
    return pdb.user_exists(user_id)


async def register(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    first_name = update.effective_user.first_name or ""
    last_name = update.effective_user.last_name or ""
    username = update.effective_chat.username or ""

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    if not await user_exists_pdb(user_id):
        pdb.add_user(user_id, username, first_name, last_name)

    keyboard = [
        [InlineKeyboardButton(config.bot_btn['buy_courses'], callback_data='pay_chapter')],
        [InlineKeyboardButton(config.bot_btn['test_sub'], callback_data='pay_chapter:test_sub')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    caption = f"{config.bot_msg['hello'].format(first_name=first_name)}"
    video_path = config.media_dir / "video.mp4"

    try:
        with open(video_path, 'rb') as video:
            await context.bot.send_video_note(
                chat_id=user_id,
                video_note=video
            )
    except telegram.error.BadRequest as e:
        logger.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ video note: {e}")
        pass

    # –ó–∞–¥–µ—Ä–∂–∫–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç–µ–∫—Å—Ç–∞
    await asyncio.sleep(3)

    await send_or_edit_message(update, context, caption, reply_markup, True)

    return ConversationHandler.END


async def start_callback_handle(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ start –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    await register(update, context)


async def my_courses_command(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã
    available_courses = pdb.get_all_user_courses(user_id)
    menu_path = 'my_courses'

    if not available_courses:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤."

        reply_markup = InlineKeyboardMarkup(my_keyboard.main_menu_button_markup())
        await send_or_edit_message(update, context, text, reply_markup)
        return

    keyboard = my_keyboard.ch_choose_button(available_courses=available_courses, menu_path=menu_path)
    keyboard.extend(my_keyboard.main_menu_button_markup())
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = "–í–∞—à–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã. –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏:"
    await send_or_edit_message(update, context, text, reply_markup)


async def my_courses_callback_handle(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    await my_courses_command(update, context)


async def all_courses_command(update: Update, context: CallbackContext) -> None:
    keyboard = my_keyboard.ch_choose_button(menu_path='all_courses')

    keyboard.extend(my_keyboard.buy_multiply_button_markup())
    keyboard.extend(my_keyboard.main_menu_button_markup())
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = config.bot_msg['choose_chapter']
    await send_or_edit_message(update, context, text, reply_markup)


async def all_courses_callback_handle(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    await all_courses_command(update, context)


async def documents_command(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    person_info_text = config.other_cfg["person_info"]
    offer_text = f'<a href="{config.other_cfg["links"]["offer"]}">–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Ñ–µ—Ä—Ç–æ–π</a>'
    privacy_text = f'<a href="{config.other_cfg["links"]["privacy"]}">–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a>'
    consent_text = f'<a href="{config.other_cfg["links"]["consent"]}">–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏</a>'
    text = person_info_text + "\n\n" + offer_text + "\n\n" + privacy_text + "\n\n" + consent_text

    keyboard = [
        [InlineKeyboardButton("üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_or_edit_message(update, context, text, reply_markup)


async def documents_callback_handle(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    await documents_command(update, context)


async def support_command(update: Update, context: CallbackContext) -> None:
    text = config.bot_msg['support']
    reply_markup = InlineKeyboardMarkup(my_keyboard.main_menu_button_markup())
    await send_or_edit_message(update, context, text, reply_markup)


async def support_callback_handle(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    await support_command(update, context)


async def cancel_sub_command(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    if not pdb.has_active_subscription(user_id):
        text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        await send_or_edit_message(update, context, text)
        return

    text = config.bot_msg['sub']['cancel']
    keyboard = [
        [InlineKeyboardButton(config.bot_btn['sub']['cancel'], callback_data="cancel_sub_confirm")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_or_edit_message(update, context, text, reply_markup)


async def zxc_command(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    test_ids = [146679674]

    keyboard = [
        [InlineKeyboardButton(config.bot_btn['test_sub'], callback_data="test_sub")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if user_id not in test_ids:
        await update.message.reply_text(text="test", reply_markup=reply_markup)
        return


async def test_sub_callback_handle(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ test_sub –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤
    test_ids = [7768888247, 5738018066]
    if user_id not in test_ids:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
        return
    
    await query.answer()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        if not pdb.can_create_test_subscription(user_id):
            await query.edit_message_text(
                text=config.bot_msg['test_sub']['not_available_history'],
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        if pdb.has_active_subscription(user_id):
            await query.edit_message_text(
                text=config.bot_msg['test_sub']['not_available_active'],
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
        order_code = other_func.generate_order_number()
        order_id = pdb.create_order(user_id=user_id, order_code=order_code)
        
        # –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        user_info = pdb.get_user_by_user_id(user_id)
        email = 'ya.matveev116@ya.ru'
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
        payment_url = payment.create_test_payment_robokassa(
            email=email,
            order_code=order_code,
            order_id=order_id,
            user_id=user_id
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 1 —Ä—É–±–ª—å", url=payment_url)],
            [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=config.bot_msg['test_sub']['info'],
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await query.edit_message_text(
            text=config.bot_msg['test_sub']['error'],
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )


async def sync_jobs_command(update: Update, context: CallbackContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ job_queue —Å –ë–î (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    admin_ids = [146679674]
    if user_id not in admin_ids:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        await sync_job_queue_with_db(context)
        await update.message.reply_text("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è job_queue —Å –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")


async def jobs_list_command(update: Update, context: CallbackContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á –≤ job_queue (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    admin_ids = [146679674]
    if user_id not in admin_ids:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        jobs = context.job_queue.jobs()

        if not jobs:
            await update.message.reply_text("üìã –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –ø—É—Å—Ç–∞")
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–æ–∫
        subscription_jobs = [job for job in jobs if
                             job.name and (job.name.startswith("charge_") or job.name.startswith("kick_"))]

        if not subscription_jobs:
            await update.message.reply_text("üìã –ó–∞–¥–∞—á –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞—á–∞—Ö
        message = "üìã –ó–∞–¥–∞—á–∏ –≤ job_queue:\n\n"

        for i, job in enumerate(subscription_jobs, 1):
            job_name = job.name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            job_data = job.data or {}

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏
            user_id_job = job_data.get('user_id', 'N/A')
            subscription_id = job_data.get('subscription_id', 'N/A')
            order_id = job_data.get('order_id', 'N/A')

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if hasattr(job, 'next_t'):
                from datetime import datetime, timezone
                next_run = job.next_t

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø next_t
                if isinstance(next_run, (int, float)):
                    # –ï—Å–ª–∏ —ç—Ç–æ timestamp
                    next_run = datetime.fromtimestamp(next_run, tz=timezone.utc)
                elif isinstance(next_run, datetime):
                    # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ datetime –æ–±—ä–µ–∫—Ç
                    if next_run.tzinfo is None:
                        next_run = next_run.replace(tzinfo=timezone.utc)
                else:
                    next_run = None

                if next_run:
                    next_run_str = next_run.strftime('%d.%m.%Y %H:%M:%S UTC')
                else:
                    next_run_str = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
            else:
                next_run_str = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"

            message += f"üîπ {i}. {job_name}\n"
            message += f"   üë§ User ID: {user_id_job}\n"
            message += f"   üìã Subscription ID: {subscription_id}\n"
            if order_id != 'N/A':
                message += f"   üõí Order ID: {order_id}\n"
            message += f"   ‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run_str}\n\n"

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        if len(message) > 3800:
            parts = [message[i:i + 3800] for i in range(0, len(message), 3800)]
            for i, part in enumerate(parts, 1):
                await update.message.reply_text(f"{part}\n\n–ß–∞—Å—Ç—å {i}/{len(parts)}")
        else:
            await update.message.reply_text(message)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")


async def cancel_sub_confirm_callback(update: Update, context: CallbackContext) -> None:
    text = config.bot_msg['sub']['cancel_confirm']
    keyboard = [
        [
            InlineKeyboardButton(config.bot_btn['sub']['confirm_cancel'], callback_data="cancel_sub_final"),
            InlineKeyboardButton(config.bot_btn['sub']['keep'], callback_data="cancel_sub_keep")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_or_edit_message(update, context, text, reply_markup)


async def cancel_sub_final_callback(update: Update, context: CallbackContext) -> None:
    user_id = update.callback_query.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        subscription = pdb.get_active_subscription(user_id)
        if not subscription:
            text = "‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            await send_or_edit_message(update, context, text)
            return

        # –û—Ç–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        pdb.cancel_subscription(subscription['subscription_id'])

        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ job_queue
        cancel_subscription_jobs(context, subscription['subscription_id'], user_id)

        text = config.bot_msg['sub']['canceled']
        await send_or_edit_message(update, context, text)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await send_or_edit_message(update, context, text)


async def cancel_sub_keep_callback(update: Update, context: CallbackContext) -> None:
    text = config.bot_msg['sub']['cancel_keep']
    await send_or_edit_message(update, context, text)


async def cancel_sub_menu_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await cancel_sub_command(update, context)


async def main_menu_callback_handle(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    text = "üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    reply_markup = my_keyboard.main_menu_items_button_markup()
    await send_or_edit_message(update, context, text, reply_markup)


async def buy_courses_command(update: Update, context: CallbackContext) -> None:
    keyboard = my_keyboard.ch_choose_button(menu_path='default')

    keyboard.extend(my_keyboard.buy_multiply_button_markup())
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = config.bot_msg['choose_chapter']
    await send_or_edit_message(update, context, text, reply_markup)


# –ü–æ–∫—É–ø–∫–∞ –∫—É—Ä—Å–æ–≤ (—Å–ø–∏—Å–æ–∫)
async def buy_courses_callback_handle(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    await buy_courses_command(update, context)


# –î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞
async def buy_chapter_callback_handle(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    # –£ –Ω–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫—É—Ä—Å
    course_key = 'course'
    try:
        menu_path = query.data.split(':')[1]
    except Exception:
        menu_path = 'default'

    course = config.courses.get(course_key)

    if not course:
        text = "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        await send_or_edit_message(update, context, text)
        return

    text = config.bot_msg['buy_chapter_info'].format(
        name=course['name'] + course['emoji'],
        description=course['description'],
        price=course['price']
    )

    keyboard = []

    if pdb.has_active_subscription(user_id) or pdb.has_manual_access(user_id, course_key):
        keyboard.append([
            InlineKeyboardButton(config.bot_btn['go_to_channel'], url=course['channel_invite_link'])
        ])
    else:
        keyboard.append([
            InlineKeyboardButton(config.bot_btn['go_to_pay'], callback_data='pay_chapter')
        ])

    keyboard.append([
        InlineKeyboardButton(config.bot_btn['go_back'], callback_data=f'go_back:{menu_path}')
    ])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_or_edit_message(update, context, text, reply_markup)


# –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ
async def pay_chapter_callback_handle(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –æ–±—ã—á–Ω–∞—è
    is_test_subscription = False
    if ':' in query.data:
        parts = query.data.split(':')
        if len(parts) > 1 and parts[1] == 'test_sub':
            is_test_subscription = True

    # –£ –Ω–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫—É—Ä—Å
    course_key = 'course'
    course = config.courses.get(course_key)

    if not course:
        text = "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        await send_or_edit_message(update, context, text)
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    if pdb.has_active_subscription(user_id):
        text = (
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞! "
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É."
        )

        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton(config.bot_btn['sub']['cancel'], callback_data='cancel_sub')]
        ])

        await send_or_edit_message(update, context, text, reply_markup)
        return ConversationHandler.END

    # –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if is_test_subscription:
        test_ids = [7768888247, 5738018066]
        if user_id not in test_ids:
            await query.edit_message_text(
                text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
            return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        if not pdb.can_create_test_subscription(user_id):
            await query.edit_message_text(
                text=config.bot_msg['test_sub']['not_available_history'],
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
            return ConversationHandler.END

    order_code = other_func.generate_order_number()
    order_id = pdb.create_order(user_id=user_id, order_code=order_code)
    context.user_data['selected_course'] = course
    context.user_data['course_key'] = course_key
    context.user_data['order_id'] = order_id
    context.user_data['order_code'] = order_code
    context.user_data['is_test_subscription'] = is_test_subscription

    context.user_data['is_in_conversation'] = True

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ - —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ start_payment_handle
    return await start_payment_handle(update, context, [course_key])


async def confirm_multi_buy_handle(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    selected_courses = context.user_data.get("multi_buy_selected", [])
    user_id = query.from_user.id

    if not selected_courses:
        text = "‚ùóÔ∏è–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫—É—Ä—Å–∞."
        await send_or_edit_message(update, context, text)
        return ConversationHandler.END

    context.user_data['is_in_conversation'] = True
    context.user_data['multi_buy_selected'] = selected_courses

    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –æ–ø–ª–∞—Ç—ã
    return await start_payment_handle(update, context, selected_courses)


async def start_payment_handle(update: Update, context: CallbackContext, selected_courses: list) -> int:
    query = update.callback_query
    user_id = query.from_user.id

    # –£ –Ω–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫—É—Ä—Å
    course_key = 'course'
    
    # –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã –≤ pay_chapter_callback_handle
    order_id = context.user_data['order_id']
    order_code = context.user_data['order_code']

    context.user_data['selected_courses'] = [course_key]

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é", callback_data=f"agree_offer:{order_code}")],
        [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    is_test_subscription = context.user_data.get('is_test_subscription', False)
    if is_test_subscription:
        text = (
            "üí≥ –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –Ω–∞ 2 –¥–Ω—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º –Ω–∞ –ø–æ–ª–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É.\n"
            "–¢—ã –º–æ–∂–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n\n"
            "üìÑ –Ø –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è –∏ –ø—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è –ü—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã.\n\n"
            f'<a href="{config.other_cfg["links"]["offer"]}">–û—Ç–∫—Ä—ã—Ç—å –æ—Ñ–µ—Ä—Ç—É</a>'
        )
    else:
        text = (
            "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –Ω–∞ 1 –º–µ—Å—è—Ü —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º.\n"
            "–¢—ã –º–æ–∂–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n\n"
            "üìÑ –Ø –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è –∏ –ø—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è –ü—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã.\n\n"
            f'<a href="{config.other_cfg["links"]["offer"]}">–û—Ç–∫—Ä—ã—Ç—å –æ—Ñ–µ—Ä—Ç—É</a>'
        )
    
    await send_or_edit_message(update, context, text, reply_markup)
    return AGREE_OFFER


# –®–∞–≥ 2 ‚Äî —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ü–î–Ω
async def handle_offer_agree(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    order_code = query.data.split(':')[1]
    pdb.update_agreed_offer(order_code, True)

    keyboard = [[InlineKeyboardButton("‚úÖ –î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ", callback_data=f"agree_privacy:{order_code}")],
                [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data='cancel')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        'üîê –Ø –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n'
        f'<a href="{config.other_cfg["links"]["privacy"]}">–ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö</a>'
    )
    await send_or_edit_message(update, context, text, reply_markup)
    return AGREE_PRIVACY


# –®–∞–≥ 3 ‚Äî —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
async def handle_privacy_agree(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    order_code = query.data.split(':')[1]
    pdb.update_agreed_privacy(order_code, True)

    keyboard = [
        [InlineKeyboardButton("‚úÖ –Ø —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data=f"agree_newsletter:{order_code}")],
        [InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data=f"disagree_newsletter:{order_code}")],
        [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = (
        "üì¨ –Ø –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
        f'<a href="{config.other_cfg["links"]["consent"]}">–î–æ–∫—É–º–µ–Ω—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ</a>'
    )
    await send_or_edit_message(update, context, text, reply_markup)
    return AGREE_NEWSLETTER


# –®–∞–≥ 4 ‚Äî e-mail
async def handle_newsletter_agree(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()
    agreement_newsletter, order_code = query.data.split(':')
    if agreement_newsletter == 'agree_newsletter':
        agreement_newsletter_bool = True
    else:
        agreement_newsletter_bool = False

    keyboard = [
        [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à e-mail –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞:"
    email_msg = await send_or_edit_message(update, context, text, reply_markup)
    pdb.update_agreed_newsletter(order_code, agreement_newsletter_bool)

    context.user_data['email_msg'] = email_msg
    context.user_data['order_code'] = order_code
    return ASK_EMAIL


# –®–∞–≥ 5 ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ e-mail –∏ –æ–ø–ª–∞—Ç–∞
async def ask_email_handle(update: Update, context: CallbackContext) -> int:
    logger.info("üì® –ü–æ–ª—É—á–µ–Ω email –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    email = update.message.text.strip()

    if not is_valid_email(email):
        keyboard = [[InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data='cancel')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail:",
            reply_markup=reply_markup
        )
        return ASK_EMAIL

    order_code = context.user_data['order_code']
    order_id = context.user_data['order_id']
    selected_courses = context.user_data.get('selected_courses', [])  # —Å–ø–∏—Å–æ–∫ course_key
    pdb.update_email(order_code, email)
    context.user_data['email'] = email

    email_msg = context.user_data.get('email_msg')
    user_id = update.effective_user.id

    try:
        if email_msg:
            await context.bot.delete_message(chat_id=user_id, message_id=email_msg.message_id)
        await update.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Ü–µ–Ω—É
    is_test_subscription = context.user_data.get('is_test_subscription', False)
    
    if is_test_subscription:
        # –î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        text_lines = [f"üìß Email: {email}"]
        text_lines.append("üß™ –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 2 –¥–Ω—è")
        total_price = config.courses['course']['test_price']  # 1 —Ä—É–±–ª—å
        text_lines.append(f"üí∞ –°—É–º–º–∞: {total_price} —Ä—É–±.")
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        text_lines = [config.bot_msg['confirm_purchase_header'].format(email=email)]
        
        # –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –∫—É—Ä—Å–∞
        total_price = 0
        for course_key in selected_courses:
            course = config.courses[course_key]
            line = config.bot_msg['confirm_purchase_course_line'].format(
                name=course['name'] + course['emoji'],
                price=course['price']
            )
            text_lines.append(line)
            total_price += course['price']
        
        # –ò—Ç–æ–≥
        text_lines.append(config.bot_msg['confirm_purchase_footer'].format(total=total_price))

    text = "\n".join(text_lines)
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–≤
    if user_id == 7768888247 or user_id == 5738018066:
        total_price = 2

    # –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂
    if is_test_subscription:
        payment_url = payment.create_test_payment_robokassa(
            email=email,
            order_code=order_code,
            order_id=order_id,
            user_id=user_id
        )
    else:
        payment_url = payment.create_payment_robokassa(
            price=total_price,
            email=email,
            num_of_chapter=",".join(selected_courses),
            order_code=order_code,
            order_id=order_id,
            user_id=user_id)

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
        [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    payment_message = await update.message.chat.send_message(
        text=text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    payment_message_id = payment_message.message_id
    pdb.update_payment_message_id(order_code, payment_message_id)

    context.user_data.clear()
    return ConversationHandler.END


# –û—Ç–º–µ–Ω–∞
async def cancel_payment_handle(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    context.user_data.clear()
    keyboard = [
        [InlineKeyboardButton("üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = "–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ."
    await send_or_edit_message(update, context, text, reply_markup)
    return ConversationHandler.END


async def buy_multiply_callback_handle(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    not_bought_courses = pdb.get_not_bought_courses(user_id)

    if not not_bought_courses:
        text = "–í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã."
        reply_markup = InlineKeyboardMarkup(my_keyboard.main_menu_button_markup())
    else:
        # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –∏–∑ context.user_data
        selected = context.user_data.get("multi_buy_selected", [])

        keyboard = my_keyboard.ch_choose_button(
            available_courses=not_bought_courses,
            mode='multi_buy',
            selected=selected
        )
        keyboard += my_keyboard.buy_multiply_menu_items_button()
        keyboard.extend(my_keyboard.main_menu_button_markup())
        reply_markup = InlineKeyboardMarkup(keyboard)
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å. –ù–∞–∂–º–∏—Ç–µ –µ—â—ë —Ä–∞–∑, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å –≤—ã–±–æ—Ä."

    await send_or_edit_message(update, context, text, reply_markup)


async def toggle_multi_buy_chapter(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data  # –ü—Ä–∏–º–µ—Ä: "multi_buy_chapter:default"
    course_key = 'course'  # –£ –Ω–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫—É—Ä—Å

    selected = context.user_data.get("multi_buy_selected", [])

    if course_key in selected:
        selected.remove(course_key)
    else:
        selected.append(course_key)

    context.user_data["multi_buy_selected"] = selected

    not_bought_courses = pdb.get_not_bought_courses(user_id)

    keyboard = my_keyboard.ch_choose_button(
        available_courses=not_bought_courses,
        mode='multi_buy',
        selected=selected
    )
    keyboard += my_keyboard.buy_multiply_menu_items_button()
    keyboard.extend(my_keyboard.main_menu_button_markup())
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å. –ù–∞–∂–º–∏—Ç–µ –µ—â—ë —Ä–∞–∑, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å –≤—ã–±–æ—Ä."
    await send_or_edit_message(update, context, text, reply_markup)


async def clear_selected_multi_buy_callback_handle(update: Update, context: CallbackContext) -> None:
    context.user_data.pop("multi_buy_selected", None)
    await buy_multiply_callback_handle(update, context)


async def upd_payment_url_handle(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data

    order_code = data.split(':')[1]
    order_data = pdb.get_order_by_code(int(order_code))

    # –£ –Ω–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫—É—Ä—Å
    course = config.courses.get('course')
    user_id = order_data['user_id']
    email = order_data['email']
    course_key = 'course'
    order_id = order_data['order_id']

    payment_url = await payment.create_payment(
        price=course['price'],
        user_id=user_id,
        email=email,
        num_of_chapter=course_key,
        order_id=order_id,
        order_code=order_code
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = config.bot_msg['confirm_purchase'].format(
        email=email,
        name=course['name'] + course['emoji'],
        num=course_key,
        price=course['price'],
    )
    payment_message = await send_or_edit_message(update, context, text, reply_markup)

    payment_message_id = payment_message.message_id
    pdb.update_payment_message_id(order_code, payment_message_id)


async def handle_join_request(update: Update, context: CallbackContext):
    join_request = update.chat_join_request
    user_id = join_request.from_user.id
    chat_id = update.chat_join_request.chat.id

    logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç {chat_id}")

    # if user_id == 7768888247:
    #     user_id = 146679674
    # if user_id == 146679674:
    #     await join_request.approve()
    #     return
    channel_data = config.channel_map.get(chat_id)

    logger.info(f"üìä channel_data –¥–ª—è {chat_id}: {channel_data}")

    if channel_data:
        name = channel_data.get('name')
        channel_invite_link = channel_data.get('channel_invite_link')
        group_invite_link = channel_data.get('group_invite_link')
    else:
        return

    # –£ –Ω–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫—É—Ä—Å
    course_key = 'course'
    logger.info(f"course_key! = {course_key}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ —Ä—É—á–Ω–æ–π –¥–æ—Å—Ç—É–ø
    if pdb.has_manual_access(user_id, course_key) or pdb.has_active_subscription(user_id):
        await join_request.approve()
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=channel_invite_link)],
            [InlineKeyboardButton("‚úÖ –í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url=group_invite_link)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=user_id,
            text=config.bot_msg['channel_access_granted'].format(channel_name=name),
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )
        logger.info(f"‚úÖ –û–¥–æ–±—Ä–µ–Ω –≤—Ö–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    else:
        await join_request.decline()
        keyboard = [
            [InlineKeyboardButton("‚úÖ –í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø", callback_data=f"grant_access:{user_id}:course")],
            [InlineKeyboardButton("‚ùå –ù–µ –≤—ã–¥–∞–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø", callback_data=f"deny_access:{user_id}:course")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(
            chat_id=config.cfg['ADMIN_CHAT_ID']['MAIN'],
            text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ {name}. –•–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –µ–º—É –¥–æ—Å—Ç—É–ø?",
            reply_markup=reply_markup,
            message_thread_id=config.cfg['ADMIN_CHAT_ID']['DECLINED_REQUESTS']
        )


async def grant_manual_access_handle(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    _, user_id_str, course_key = query.data.split(":")
    user_id = int(user_id_str)
    admin_id = query.from_user.id
    course = config.courses.get('course')
    name = course['name'] + course['emoji']
    # –î–æ–±–∞–≤–∏–º –¥–æ—Å—Ç—É–ø –≤ manual_access
    try:
        pdb.grant_manual_access(user_id=user_id, granted_by=admin_id)
        text = (
            f"‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∫ –∫—É—Ä—Å—É {name} —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω. –¢–µ–ø–µ—Ä—å –µ–º—É –Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª."
        )
        await send_or_edit_message(update, context, text)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞: {e}")
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø."
        await send_or_edit_message(update, context, text)


async def deny_manual_access(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    _, user_id_str, course_key = query.data.split(":")
    text = f"‚õîÔ∏è –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ –≤ –¥–æ—Å—Ç—É–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_str} –∫ –∫—É—Ä—Å—É."
    await send_or_edit_message(update, context, text)


async def go_back_callback_handle(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    menu_path = query.data.split(':')[1]
    if menu_path == 'all_courses':
        await all_courses_command(update, context)
    elif menu_path == 'my_courses':
        await my_courses_command(update, context)
    else:
        await buy_courses_command(update, context)


async def error_handler(update: object, context: CallbackContext) -> None:
    logger.error("Exception while handling an update:", exc_info=context.error)

    tb_list = traceback.format_exception(None, context.error, context.error.__traceback__)
    tb_string = "".join(tb_list)

    update_str = update.to_dict() if isinstance(update, Update) else str(update)
    message_base = (
        "An exception was raised while handling an update\n"
        f"<pre>update = {html.escape(json.dumps(update_str, indent=2, ensure_ascii=False))}</pre>\n\n"
        f"<pre>context.chat_data = {html.escape(str(context.chat_data))}</pre>\n\n"
        f"<pre>context.user_data = {html.escape(str(context.user_data))}</pre>\n\n"
    )

    # –†–∞–∑–±–∏–µ–Ω–∏–µ tb_string –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤
    max_length = 4096 - len(message_base) - 100  # –í—ã—á–∏—Ç–∞–µ–º –¥–ª–∏–Ω—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –º–µ—Å—Ç–æ
    parts = [tb_string[i:i + max_length] for i in range(0, len(tb_string), max_length)]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    await context.bot.send_message(
        chat_id=config.cfg['ADMIN_CHAT_ID']['MAIN'], text=message_base, parse_mode=ParseMode.HTML,
        message_thread_id=config.cfg['ADMIN_CHAT_ID']['LOGS']
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å traceback –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
    for part in parts:
        message = f"<pre>{html.escape(part)}</pre>"
        await context.bot.send_message(
            chat_id=config.cfg['ADMIN_CHAT_ID']['MAIN'], text=message, parse_mode=ParseMode.HTML,
            message_thread_id=config.cfg['ADMIN_CHAT_ID']['LOGS']
        )


async def post_init(application: Application) -> None:
    # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ main_menu
    menu_commands = [
        BotCommand(f"/{key}", value) for key, value in config.bot_btn['main_menu'].items()
    ]

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–∏ 3 –∫–æ–º–∞–Ω–¥—ã
    await application.bot.set_my_commands(menu_commands)


buy_course_conversation = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(pay_chapter_callback_handle, pattern="^pay_chapter"),
        CallbackQueryHandler(confirm_multi_buy_handle, pattern="^confirm_buy_multiply$")
    ],
    states={
        AGREE_OFFER: [CallbackQueryHandler(handle_offer_agree, pattern="^agree_offer:")],
        AGREE_PRIVACY: [CallbackQueryHandler(handle_privacy_agree, pattern="^agree_privacy:")],
        AGREE_NEWSLETTER: [
            CallbackQueryHandler(handle_newsletter_agree, pattern="^(agree_newsletter:|disagree_newsletter:)")
        ],
        ASK_EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_email_handle)],
    },
    fallbacks=[CallbackQueryHandler(cancel_payment_handle, pattern="^cancel$")],
    allow_reentry=True
)


def run():
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ RateLimiter
    rate_limiter = AIORateLimiter(
        overall_max_rate=30,  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –Ω–∞ –≤—Å–µ–≥–æ –±–æ—Ç–∞
        overall_time_period=1,  # –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        group_max_rate=20,  # –ú–∞–∫—Å–∏–º—É–º 20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É –Ω–∞ –≥—Ä—É–ø–ø—É
        group_time_period=60  # –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    )

    application = (
        ApplicationBuilder()
        .token(config.config_env['TELEGRAM_TOKEN'])
        .read_timeout(60)
        .write_timeout(60)
        .concurrent_updates(True)
        .rate_limiter(rate_limiter)
        .post_init(post_init)
        .build()
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é job_queue —Å –ë–î
    schedule_daily_sync(application)

    application.add_handler(CommandHandler('start', register))
    # application.add_handler(CommandHandler('my_courses', my_courses_command))
    # application.add_handler(CommandHandler('all_courses', all_courses_command))
    application.add_handler(CommandHandler('documents', documents_command))
    application.add_handler(CommandHandler('support', support_command))
    application.add_handler(CommandHandler('cancel_sub', cancel_sub_command))
    application.add_handler(CommandHandler('zxc', zxc_command))
    application.add_handler(CommandHandler('sync_jobs', sync_jobs_command))
    application.add_handler(CommandHandler('jobs_list', jobs_list_command))

    application.add_handler(CallbackQueryHandler(start_callback_handle, pattern="^start$"))
    application.add_handler(CallbackQueryHandler(buy_courses_callback_handle, pattern="^buy_courses$"))
    application.add_handler(CallbackQueryHandler(buy_chapter_callback_handle, pattern="^buy_chapter$"))

    # application.add_handler(CallbackQueryHandler(buy_multiply_callback_handle, pattern="^buy_multiply$"))

    # application.add_handler(CallbackQueryHandler(toggle_multi_buy_chapter, pattern="^multi_buy_chapter:"))

    application.add_handler(CallbackQueryHandler(go_back_callback_handle, pattern="^go_back:"))

    # application.add_handler(CallbackQueryHandler(clear_selected_multi_buy_callback_handle,
    #                                              pattern="^clear_buy_multiply$"))

    application.add_handler(CallbackQueryHandler(upd_payment_url_handle, pattern="^upd_payment_url:"))

    application.add_handler(CallbackQueryHandler(main_menu_callback_handle, pattern="^main_menu$"))
    application.add_handler(CallbackQueryHandler(my_courses_callback_handle, pattern="^my_courses$"))
    # application.add_handler(CallbackQueryHandler(all_courses_callback_handle,
    #                                              pattern=r"^(all_courses|go_back_buy_multiply)$"))
    application.add_handler(CallbackQueryHandler(documents_callback_handle, pattern="^documents$"))
    application.add_handler(CallbackQueryHandler(support_callback_handle, pattern="^support$"))

    application.add_handler(CallbackQueryHandler(grant_manual_access_handle, pattern="^grant_access:"))
    application.add_handler(CallbackQueryHandler(deny_manual_access, pattern="^deny_access:"))

    application.add_handler(CallbackQueryHandler(cancel_sub_confirm_callback, pattern="^cancel_sub_confirm$"))
    application.add_handler(CallbackQueryHandler(cancel_sub_final_callback, pattern="^cancel_sub_final$"))
    application.add_handler(CallbackQueryHandler(cancel_sub_keep_callback, pattern="^cancel_sub_keep$"))
    application.add_handler(CallbackQueryHandler(cancel_sub_menu_callback, pattern="^cancel_sub$"))
    application.add_handler(CallbackQueryHandler(test_sub_callback_handle, pattern="^test_sub$"))

    application.add_handler(buy_course_conversation)
    application.add_handler(ChatJoinRequestHandler(handle_join_request))
    application.add_error_handler(error_handler)

    logger.addHandler(logging.StreamHandler())

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    run()
